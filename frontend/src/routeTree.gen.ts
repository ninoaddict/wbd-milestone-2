/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as JobImport } from './routes/job'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'
import { Route as ProfileUserIdImport } from './routes/profile/$userId'
import { Route as authRegisterImport } from './routes/(auth)/register'
import { Route as authLoginImport } from './routes/(auth)/login'
import { Route as connectionUserListUserIdImport } from './routes/(connection)/userList/$userId'
import { Route as connectionConReqUserIdImport } from './routes/(connection)/conReq/$userId'
import { Route as connectionConListUserIdImport } from './routes/(connection)/conList/$userId'

// Create/Update Routes

const JobRoute = JobImport.update({
  id: '/job',
  path: '/job',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ProfileUserIdRoute = ProfileUserIdImport.update({
  id: '/profile/$userId',
  path: '/profile/$userId',
  getParentRoute: () => rootRoute,
} as any)

const authRegisterRoute = authRegisterImport.update({
  id: '/(auth)/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const authLoginRoute = authLoginImport.update({
  id: '/(auth)/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const connectionUserListUserIdRoute = connectionUserListUserIdImport.update({
  id: '/(connection)/userList/$userId',
  path: '/userList/$userId',
  getParentRoute: () => rootRoute,
} as any)

const connectionConReqUserIdRoute = connectionConReqUserIdImport.update({
  id: '/(connection)/conReq/$userId',
  path: '/conReq/$userId',
  getParentRoute: () => rootRoute,
} as any)

const connectionConListUserIdRoute = connectionConListUserIdImport.update({
  id: '/(connection)/conList/$userId',
  path: '/conList/$userId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/job': {
      id: '/job'
      path: '/job'
      fullPath: '/job'
      preLoaderRoute: typeof JobImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/register': {
      id: '/(auth)/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof authRegisterImport
      parentRoute: typeof rootRoute
    }
    '/profile/$userId': {
      id: '/profile/$userId'
      path: '/profile/$userId'
      fullPath: '/profile/$userId'
      preLoaderRoute: typeof ProfileUserIdImport
      parentRoute: typeof rootRoute
    }
    '/(connection)/conList/$userId': {
      id: '/(connection)/conList/$userId'
      path: '/conList/$userId'
      fullPath: '/conList/$userId'
      preLoaderRoute: typeof connectionConListUserIdImport
      parentRoute: typeof rootRoute
    }
    '/(connection)/conReq/$userId': {
      id: '/(connection)/conReq/$userId'
      path: '/conReq/$userId'
      fullPath: '/conReq/$userId'
      preLoaderRoute: typeof connectionConReqUserIdImport
      parentRoute: typeof rootRoute
    }
    '/(connection)/userList/$userId': {
      id: '/(connection)/userList/$userId'
      path: '/userList/$userId'
      fullPath: '/userList/$userId'
      preLoaderRoute: typeof connectionUserListUserIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/job': typeof JobRoute
  '/login': typeof authLoginRoute
  '/register': typeof authRegisterRoute
  '/profile/$userId': typeof ProfileUserIdRoute
  '/conList/$userId': typeof connectionConListUserIdRoute
  '/conReq/$userId': typeof connectionConReqUserIdRoute
  '/userList/$userId': typeof connectionUserListUserIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/job': typeof JobRoute
  '/login': typeof authLoginRoute
  '/register': typeof authRegisterRoute
  '/profile/$userId': typeof ProfileUserIdRoute
  '/conList/$userId': typeof connectionConListUserIdRoute
  '/conReq/$userId': typeof connectionConReqUserIdRoute
  '/userList/$userId': typeof connectionUserListUserIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/job': typeof JobRoute
  '/(auth)/login': typeof authLoginRoute
  '/(auth)/register': typeof authRegisterRoute
  '/profile/$userId': typeof ProfileUserIdRoute
  '/(connection)/conList/$userId': typeof connectionConListUserIdRoute
  '/(connection)/conReq/$userId': typeof connectionConReqUserIdRoute
  '/(connection)/userList/$userId': typeof connectionUserListUserIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/job'
    | '/login'
    | '/register'
    | '/profile/$userId'
    | '/conList/$userId'
    | '/conReq/$userId'
    | '/userList/$userId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/job'
    | '/login'
    | '/register'
    | '/profile/$userId'
    | '/conList/$userId'
    | '/conReq/$userId'
    | '/userList/$userId'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/job'
    | '/(auth)/login'
    | '/(auth)/register'
    | '/profile/$userId'
    | '/(connection)/conList/$userId'
    | '/(connection)/conReq/$userId'
    | '/(connection)/userList/$userId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  JobRoute: typeof JobRoute
  authLoginRoute: typeof authLoginRoute
  authRegisterRoute: typeof authRegisterRoute
  ProfileUserIdRoute: typeof ProfileUserIdRoute
  connectionConListUserIdRoute: typeof connectionConListUserIdRoute
  connectionConReqUserIdRoute: typeof connectionConReqUserIdRoute
  connectionUserListUserIdRoute: typeof connectionUserListUserIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  JobRoute: JobRoute,
  authLoginRoute: authLoginRoute,
  authRegisterRoute: authRegisterRoute,
  ProfileUserIdRoute: ProfileUserIdRoute,
  connectionConListUserIdRoute: connectionConListUserIdRoute,
  connectionConReqUserIdRoute: connectionConReqUserIdRoute,
  connectionUserListUserIdRoute: connectionUserListUserIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/job",
        "/(auth)/login",
        "/(auth)/register",
        "/profile/$userId",
        "/(connection)/conList/$userId",
        "/(connection)/conReq/$userId",
        "/(connection)/userList/$userId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/job": {
      "filePath": "job.tsx"
    },
    "/(auth)/login": {
      "filePath": "(auth)/login.tsx"
    },
    "/(auth)/register": {
      "filePath": "(auth)/register.tsx"
    },
    "/profile/$userId": {
      "filePath": "profile/$userId.tsx"
    },
    "/(connection)/conList/$userId": {
      "filePath": "(connection)/conList/$userId.tsx"
    },
    "/(connection)/conReq/$userId": {
      "filePath": "(connection)/conReq/$userId.tsx"
    },
    "/(connection)/userList/$userId": {
      "filePath": "(connection)/userList/$userId.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
